name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: timescale/timescaledb:latest-pg15
        env:
          POSTGRES_DB: traderai_test
          POSTGRES_USER: traderai
          POSTGRES_PASSWORD: traderai
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential wget
          wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz
          tar -xzf ta-lib-0.4.0-src.tar.gz
          cd ta-lib/
          ./configure --prefix=/usr
          make
          sudo make install
          cd ..

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --no-interaction --no-ansi

      - name: Run linters
        run: |
          poetry run black --check apps/ tests/
          poetry run ruff check apps/ tests/

      - name: Run tests
        env:
          DATABASE_URL: postgresql://traderai:traderai@localhost:5432/traderai_test
          ASYNC_DATABASE_URL: postgresql+asyncpg://traderai:traderai@localhost:5432/traderai_test
          REDIS_URL: redis://localhost:6379/0
          CELERY_BROKER_URL: redis://localhost:6379/1
          CELERY_RESULT_BACKEND: redis://localhost:6379/2
          SECRET_KEY: test-secret-key
          EXCHANGE_SANDBOX: true
        run: |
          poetry run pytest tests/ -v --cov=apps --cov-report=xml --cov-report=html

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Install dependencies
        working-directory: apps/web
        run: npm ci

      - name: Run linter
        working-directory: apps/web
        run: npm run lint

      - name: Build application
        working-directory: apps/web
        run: npm run build
        env:
          API_URL: http://localhost:8000

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Docker images
        run: docker-compose build

      - name: Start services
        run: docker-compose up -d

      - name: Wait for services
        run: |
          sleep 30
          docker-compose ps

      - name: Check API health
        run: |
          curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:8000/health

      - name: Run integration tests
        run: |
          docker-compose exec -T api pytest tests/ -v -m integration

      - name: Stop services
        if: always()
        run: docker-compose down -v

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Bandit (Python security)
        run: |
          pip install bandit
          bandit -r apps/ -f json -o bandit-report.json || true

      - name: Run npm audit (Node security)
        working-directory: apps/web
        run: |
          npm audit --production || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: |
            bandit-report.json

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, integration-tests]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push API image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: infra/dockerfiles/api.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/traderai-api:latest
            ${{ secrets.DOCKER_USERNAME }}/traderai-api:${{ github.sha }}

      - name: Build and push Web image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: infra/dockerfiles/web.Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/traderai-web:latest
            ${{ secrets.DOCKER_USERNAME }}/traderai-web:${{ github.sha }}
