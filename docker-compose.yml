version: "3.9"

services:
  db:
    image: timescale/timescaledb-ha:pg15-latest
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-trader_ai}
      POSTGRES_USER: ${POSTGRES_USER:-trader}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-trader_pw}
    ports: ["5432:5432"]
    volumes: [ "pgdata:/var/lib/postgresql/data" ]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7-alpine
    ports: ["6379:6379"]

  redpanda:
    image: docker.redpanda.com/redpandadata/redpanda:v24.1.14
    command:
      - redpanda start --smp 1 --memory 512M --reserve-memory 0M --overprovisioned
        --node-id 0 --check=false --kafka-addr 0.0.0.0:9092
        --advertise-kafka-addr redpanda:9092
    ports: ["9092:9092"]

  api:
    build: { context: ".", dockerfile: infra/api.Dockerfile }
    env_file: [ .env.example ]
    depends_on: [ db, redis, redpanda ]
    ports: ["8000:8000"]
    command: uvicorn apps.api.main:app --host 0.0.0.0 --port 8000 --log-level ${API_LOG_LEVEL:-info}

  ml:
    build: { context: ".", dockerfile: infra/ml.Dockerfile }
    env_file: [ .env.example ]
    depends_on: [ db, redis, redpanda ]
    command: python -m apps.ml.worker

  web:
    build: { context: ".", dockerfile: infra/web.Dockerfile }
    env_file: [ .env.example ]
    depends_on: [ api ]
    ports: ["3000:3000"]

volumes:
  pgdata: