name: trader_ai

networks:
  trader_ai_net:

volumes:
  trader_ai_db_data:

services:
  db:
    image: timescale/timescaledb:2.14.2-pg15
    container_name: trader_ai-db-1
    environment:
      - POSTGRES_USER=trader
      - POSTGRES_PASSWORD=trader
      - POSTGRES_DB=trader_ai
    # Bez publikacji portu na hosta â€” unikasz konfliktu z lokalnym 5432
    volumes:
      - trader_ai_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trader -d trader_ai || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 15
      start_period: 10s
    networks:
      - trader_ai_net

  redis:
    image: redis:7-alpine
    container_name: trader_ai-redis-1
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    networks:
      - trader_ai_net

  kafka:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    container_name: trader_ai-kafka-1
    command:
      - redpanda
      - start
      - --overprovisioned
      - --smp=1
      - --memory=512M
      - --reserve-memory=0M
      - --node-id=0
      - --check=false
      - --kafka-addr=PLAINTEXT://0.0.0.0:9092
      - --advertise-kafka-addr=PLAINTEXT://kafka:9092
    ports:
      - "9092:9092"
    networks:
      - trader_ai_net

  api:
    build:
      context: .
      dockerfile: api.Dockerfile
    container_name: trader_ai-api-1
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started
    command: >
      uvicorn apps.api.main:app
      --host 0.0.0.0
      --port 8000
      --proxy-headers
    ports:
      - "8000:8000"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1:8000/health || curl -fsS http://127.0.0.1:8000/health"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 15s
    networks:
      - trader_ai_net

  worker:
    build:
      context: .
      dockerfile: worker.Dockerfile
    container_name: trader_ai-worker-1
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started
    command: ["python", "-m", "apps.ml.worker"]
    restart: unless-stopped
    networks:
      - trader_ai_net

  web:
    build:
      context: .
      dockerfile: web.Dockerfile
    container_name: trader_ai-web-1
    env_file:
      - .env
    depends_on:
      api:
        condition: service_started
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - trader_ai_net
  data_fetcher:
    build:
      context: .
      dockerfile: worker.Dockerfile
    command: ["python", "-m", "apps.worker.data_fetcher"]
    depends_on:
      - db
      - redis
      - kafka
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - PAIRS=${PAIRS}
      - BACKFILL_YEARS=${BACKFILL_YEARS}